I wanna know what the docker is

Paweł Marchewka

* Docker vs VM

* Virtual Machine

A full-blown “guest” operating system with _virtual_access_ to host resources through a hypervisor

.image img/vm.png _ 480

* Docker

A container runs natively on Linux and shares the kernel of the host machine with other containers.

.image img/docker.png _ 480

* Container

Containers are:

- Flexible: Even the most complex applications can be containerized.
- Lightweight: Containers leverage and share the host kernel.
- Interchangeable: You can deploy updates and upgrades on-the-fly.
- Portable: You can build locally, deploy to the cloud, and run anywhere.
- Scalable: You can increase and automatically distribute container replicas.
- Stackable: You can stack services vertically and on-the-fly.

* Container

A container is launched by running an image. An image is an executable package that includes everything needed to run an application:

- the code
- a runtime
- libraries
- environment variables
- configuration files

* The underlying technology

- namespaces: *pid*, *net*, *ipc*, *mnt*, *uts*
- control groups (_cgropus_) - limit resources like memory
- union file systems - is used to layer Docker images

* Architecture

.image img/architecture.svg _ 960

* Hello world

.play -edit src/hello_world.sh /START OMIT/,/END OMIT/

To try something more ambitious, we can run an Ubuntu container with:

    docker run -it ubuntu bash

Let's list containers

.play -edit src/docker_container_ls.sh /START OMIT/,/END OMIT/

Let's list images

.play -edit src/docker_image_ls.sh /START OMIT/,/END OMIT/

Clean up

.play -edit src/docker_clean.sh /START OMIT/,/END OMIT/

* Containers

* App

.code app/app.py

* Let's build an application

.code app/Dockerfile

.play -edit src/build_app.sh /START OMIT/,/END OMIT/

Clean up

.play -edit src/docker_clean.sh /START OMIT/,/END OMIT/

* References

- [[https://www.gnu.org/software/bash/manual/bash.html][Bash manual]] 
- [[https://www.tldp.org/LDP/abs/html/][Advanced Bash-Scripting Guide]] 
