Przejdźmy na GO! - studium przypadku

Paweł Marchewka
Katarzyna Rybacka
Codilime

* Tungsten Fabric

* Tungsten Fabric

SDNy - wirtualne sieci dla wirtualnych komputerów

.image python-to-go/img/one-rule.png _ 480

* Architektura
Dosyć rozbudowana

.image python-to-go/img/contrail_simple.png _ 600

* Problemy

* Język - Python:

- Dynamiczne typowanie
- Brak wsparcia dla współbieżności
- Brak ustandaryzowanego stylu kodowania
- Brak organizacji kodu

* Dynamiczne typowanie
.image python-to-go/img/dynamiczne-typowanie.png _ 500

* A żeby zrozumieć tę metodę..
.image python-to-go/img/dynamiczne-komentarze.png _ 600

* Brak ustandaryzowanego stylu kodowania
.image python-to-go/img/reutrn.png _ 600

* Brak organizacji kodu
Tutaj dobry screen albo jakies inne przedstawienie

* Brak transakcji

- Dwie bazy danych: Cassandra, Zookeeper
- Ściany metod undo..
.image python-to-go/img/undo.png _ 480

* Nierozwijalny

Obecna architektura oraz stan kodu nie pozwala na dodanie nowych, istotnych funkcji

* Napiszmy wszystko od nowa

* Założenia

Przejdźmy na GO

Zmieńmy architekturę

X komponentów Y lini kodu

5 miesięcy -10 programistów

* Czemu GO?

Statycznie typowany

Prosty do nauki

Posiada rozbudowane narzędzia statycznej analizy kodu

Szybki kompilator:
“Go was developed while waiting for a C++ program to compile”

Generyczne wsparcie współbieżności

* Co może pójść nie tak?

* Niejedno, wiele, dużo

* Errors are values

* Error

W Go error to interfejs

    type error interface {
        Error() string
    }

Najprostrza implementacja

    type errorString struct {
        s string
    }

    func (e *errorString) Error() string {
        return e.s
    }

* Obsługa błędów gorzej

.play -edit errors_bad.go /START OMIT/,/END OMIT/

* Obsługa błędów lepiej
.play errors_good.go /START OMIT/,/END OMIT/

* Make the zero value useful (or useless?)

* Problem

W JSONie pole może mieć 3 stany:

- posiada wartość
- jest puste
- pole nie występuje

W Pythonie dość łatwo można to wyrazić

    if 'ipam_subnet_method' in obj_dict:
        new_subnet_method = obj_dict.get('ipam_subnet_method')
        if (old_subnet_method != new_subnet_method):
            return (False, (400, 'ipam_subnet_method can not be changed'))

* Make the zero value useful

.play -edit json.go /START OMIT/,/END OMIT/

* Pointers

.play -edit json_pointer.go /START OMIT/,/END OMIT/

* Fieldmask

Python

    if 'ipam_subnet_method' in obj_dict:
        new_subnet_method = obj_dict.get('ipam_subnet_method')
        if (old_subnet_method != new_subnet_method):
            return (False, (400, 'ipam_subnet_method can not be changed'))

Go

	if format.CheckPath(fieldMask, []string{models.NetworkIpamFieldIpamSubnetMethod}) {
		if oldIpam.GetIpamSubnetMethod() != newIpam.GetIpamSubnetMethod() {
			return errors.Errorf("Subnet method cannot be changed")
		}
	}
	return nil

* Brak generyczności

Szablony <3 + narzędzia
