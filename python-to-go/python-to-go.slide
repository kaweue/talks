Przejdźmy na GO! - studium przypadku

Paweł Marchewka
Katarzyna Rybacka
Codilime

* Tungsten Fabric

* Tungsten Fabric

SDNy - wirtualne sieci dla wirtualnych komputerów

.image python-to-go/img/one-rule.png _ 480

* Architektura
Dosyć rozbudowana

.image python-to-go/img/contrail_simple.png _ 600

* Problemy
Python:

- Dynamiczne typowanie
- Brak wsparcia dla współbieżności
- Brak ustandaryzowanego stylu kodowania
- Brak organizacji kodu (chodzi o to że w GO kod zorganizowany w pakiety, modularnosc, przejrzystosc)

Brak transakcji - 2 bazy danych Cassandra orz Zookeeper 

Nierozwijalny - obecna architektura oraz stan kodu nie pozwala na dodanie istotny nowych funkcji

* Napiszmy wszystko od nowa

* Założenia

Przejdźmy na GO

Zmieńmy architekturę

X komponentów Y lini kodu

5 miesięcy -10 programistów

* Czemu GO?

“Go was developed while waiting for a C++ program to compile”

Sophisticated Static Analysis tooling

Concurrency - abstractions that don’t build on top of threading paradigms, callbacks are avoided

* Co może pójść nie tak?

* Niejedno, wiele, dużo

* Brak generyczności

Szablony <3 + narzędzia

* Make the zero value useful

Fieldmask vs Pointers

* Wyjątki vs “error“

W Go error to interfejs

    type error interface {
        Error() string
    }

Najprostrza implementacja

    type errorString struct {
        s string
    }

    func (e *errorString) Error() string {
        return e.s
    }

* Obsługa błędów gorzej

.play -edit errors_bad.go /START OMIT/,/END OMIT/

* Obsługa błędów lepiej
.play errors_good.go /START OMIT/,/END OMIT/

* Ewolucja vs Rewolucja

Czy da się zmienić wszystko na raz
