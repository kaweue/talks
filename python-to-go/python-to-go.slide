Przejdźmy na GO! - studium przypadku

Paweł Marchewka
Katarzyna Rybacka
Codilime

* Tungsten Fabric

* Tungsten Fabric

SDNy - wirtualne sieci dla wirtualnych komputerów

.image python-to-go/img/one-rule.png _ 480

* Architektura
Dosyć rozbudowana

.image python-to-go/img/contrail_simple.png _ 600

* Problemy

* Język - Python:

- Dynamiczne typowanie
- Brak wsparcia dla współbieżności
- Brak ustandaryzowanego stylu kodowania
- Brak organizacji kodu

* Dynamiczne typowanie
.image python-to-go/img/dynamiczne-typowanie.png _ 500

* A żeby zrozumieć tę metodę..
.image python-to-go/img/dynamiczne-komentarze.png _ 600

* Brak ustandaryzowanego stylu kodowania
.image python-to-go/img/reutrn.png _ 600

* Brak organizacji kodu
Tutaj dobry screen albo jakies inne przedstawienie

* Brak transakcji

- Dwie bazy danych: Cassandra, Zookeeper
- Ściany metod undo..
.image python-to-go/img/undo.png _ 480

* Nierozwijalny

Obecna architektura oraz stan kodu nie pozwala na dodanie nowych, istotnych funkcji

* Napiszmy wszystko od nowa

* Założenia

Przejdźmy na GO

Zmieńmy architekturę

X komponentów Y lini kodu

5 miesięcy -10 programistów


* Czemu GO?

“Go was developed while waiting for a C++ program to compile”

Sophisticated Static Analysis tooling

Concurrency - abstractions that don’t build on top of threading paradigms, callbacks are avoided

* Co może pójść nie tak?

* Niejedno, wiele, dużo

* Brak generyczności

Szablony <3 + narzędzia

* Make the zero value useful

Fieldmask vs Pointers

* Wyjątki vs “if err != nil {“ czy to jest dobre

Czy to jest dobre?

* Ewolucja vs Rewolucja

Czy da się zmienić wszystko na raz
